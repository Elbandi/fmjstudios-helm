# Default Helm values for fmjstudios/gobackup.
# Reference: https://github.com/fmjstudios/helm

# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Image parameters
##

## GoBackup Server Image
## ref: https://hub.docker.com/r/huacnlee/gobackup
## @param image.registry The Docker registry to pull the image from
## @param image.repository The registry repository to pull the image from
## @param image.tag The image tag to pull
## @param image.digest The image digest to pull
## @param image.pullPolicy The Kubernetes image pull policy
## @param image.pullSecrets A list of secrets to use for pulling images from private registries

image:
  registry: docker.io
  repository: huacnlee/gobackup
  tag: v2.11.2
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []

## @section Name overrides
##

## @param nameOverride String to partially override gobackup.fullname
##
nameOverride: ""

## @param fullnameOverride String to fully override gobackup.fullname
##
fullnameOverride: ""

## @section GoBackup Configuration parameters
##

## GoBackup configuration
## ref: https://gobackup.github.io/configuration
gobackup:
  ## @param gobackup.workdir [default: /tmp] Define a working directory for GoBackup to generate temporary files
  ##
  workdir: /tmp

  ## Web UI configuration
  ##
  web:
    ## @param gobackup.web.host [string] The host the network socket should bind to. You will most likely never change this.
    ##
    host: 0.0.0.0
    ## @param gobackup.web.port [default: 2703] The port to bind the network socket to
    ##
    port: 2703
    ## @param gobackup.web.username [string] The HTTP Basic Auth username
    ##
    username: ""
    ## @param gobackup.web.password [string] The HTTP Basic Auth password
    ##
    password: ""
    ## @param gobackup.web.existingSecret [string] The name of a `basic-auth` secret containing aforementioned credentials
    ##
    existingSecret: ""

  ## Models configuration
  ## ref: https://gobackup.github.io/configuration
  ##
  ## NOTE: you will need to edit this for GoBackup to work
  ##
  models:
    ## @param gobackup.models[0].name The name of the model to create (the YAML keys everything is nested under, e.g. `model_name1` in ref)
    ## ref: https://gobackup.github.io/configuration#config-file-example
    ##
    - name: default
      ## @param gobackup.models[0].description Define a description for this GoBackup model
      ## ref: https://gobackup.github.io/configuration#modelconfig
      ##
      description: "Default GoBackup model"
      ## @param gobackup.models[0].default Set a default storage name
      ## ref: https://gobackup.github.io/configuration#modelconfig
      ##
      default: default
      ## @param gobackup.models[0].schedule Configure a schedule on which the model should run
      ## ref: https://gobackup.github.io/schedule
      ##
      schedule: {}

      ## Configure scripts to run before or after GoBackup model execution
      ## ref: https://gobackup.github.io/configuration#config-file-example
      ##
      scripts:
        ## @param gobackup.models[0].scripts.before A script to be executed before the backup
        ##
        before: ""
        ## @param gobackup.models[0].scripts.after A script to be executed after the backup
        ##
        after: ""

      ## @param gobackup.models[0].databases Configure the databases in the model
      ## ref: https://gobackup.github.io/configuration#databaseconfig
      ##
      ## `name` is the name of the parent YAML key
      ## `type` is the type of database to back up
      ## `config` is the configuration properties for said database type
      ## `existingSecret` is an existing `basic-auth` Secret from which the credential will be used
      ##
      ## e.g. for PostgreSQL (https://gobackup.github.io/configuration/databases/postgresql), to produce the example shown
      ## you would set the following object:
      ##
      ## name: my_app
      ## type: postgresql
      ## config:
      ##   host: localhost
      ##   port: 5432
      ##   database: my_app_production
      ##   user: root
      ##   password: root
      ##   ...
      ##
      databases: []
      ##  - name: postgresql
      ##    type: postgresql
      ##    config: { }
      ##    existingSecret: ""

      ## @param gobackup.models[0].storages Configure the storages in the model
      ## ref: https://gobackup.github.io/configuration/storages
      ##
      ## `name` is the name of the parent YAML key
      ## `type` is the type of storage to back up to
      ## `config` is the configuration properties for said storage type
      ## `existingSecret` is an existing `basic-auth` Secret from which credentials will be used
      ##
      ## The `existingSecret` will look for the following keys within the secret, depending on the type of storage:
      ##    - ftp - `username` and `password` (basic-auth)
      ##    - sftp - `username`, `password`, `privateKey` and `passphrase`
      ##    - scp - `username`, `password`, `privateKey` and `passphrase`
      ##    - webdav - `username` and `password` (basic-auth)
      ##    - s3 - `accessKey` and `secretKey`
      ##    - oss - `accessKey` and `secretKey`
      ##    - gcs - `credentials`
      ##    - azure - `clientId` and `clientSecret`
      ##    - r2 - `accessKey` and `secretKey`
      ##    - spaces - `accessKey` and `secretKey`
      ##    - b2 - `accessKey` and `secretKey`
      ##    - cos - `accessKey` and `secretKey`
      ##    - us3 - `accessKey` and `secretKey`
      ##    - kodo - `accessKey` and `secretKey`
      ##    - bos - `accessKey` and `secretKey`
      ##    - minio - `accessKey` and `secretKey`
      ##    - obs - `accessKey` and `secretKey`
      ##    - tos - `accessKey` and `secretKey`
      ##    - upyun - `accessKey` and `secretKey`
      ##
      ## e.g. for S3 (https://gobackup.github.io/configuration/storages/s3), to produce the example shown
      ## you would set the following object:
      ##
      ## name: s3
      ## type: s3
      ## config:
      ##   bucket: my_app_backup
      ##   region: us-east-1
      ##   path: backups
      ##   ...
      ##
      storages: []
      ##  - name: s3
      ##    type: s3
      ##    config: { }
      ##    existingSecret: ""

      ## @param gobackup.models[0].notifiers Configure the notifiers in the model
      ## ref: https://gobackup.github.io/configuration/notifiers
      ##
      ## `name` is the name of the parent YAML key
      ## `type` is the type of storage to back up to
      ## `config` is the configuration properties for said storage type
      ## `existingSecret` is an existing `basic-auth` Secret from which credentials will be used
      ##
      ## The `existingSecret` will look for the following keys within the secret, depending on the type of notifier:
      ##    - mail - `username` and `password` (basic-auth)
      ##    - telegram - `token`
      ##    - github - `token`
      ##    - ses - `accessKey` and `secretKey`
      ##    - postmark - `token`
      ##    - sendgrid - `token`
      ##
      ##
      ## e.g. for SES (https://gobackup.github.io/configuration/notifiers/ses), to produce the example shown
      ## you would set the following object:
      ##
      ## name: ses
      ## type: ses
      ## config:
      ##   from: from@example.com
      ##   to: to@example.com
      ##   region: us-east-1
      ##   ...
      ##
      notifiers: []
      ##  - name: mail
      ##    type: mail
      ##    config: { }
      ##    existingSecret: ""

      ## @param gobackup.models[0].compression The compression format used for created backups (e.g. `tgz`)
      ## ref: https://gobackup.github.io/configuration/compressor/tar#formats
      ##
      compression: ""

      ## @param gobackup.models[0].encryption The encryption configuration (locked to type `openssl`)
      ## ref: https://gobackup.github.io/configuration/encryptor/openssl
      ##
      ## NOTE: define the dict key `existingSecret` in order to provide a secret with a `passphrase` key which to use
      ## as the encryption password. Otherwise the key `password` will be used to render a secret which will set an
      ## environment variable which is referenced in the config file.
      ##
      encryption: {}

      ## @param gobackup.models[0].archive Configure archival of directories
      ## ref: https://gobackup.github.io/configuration/archive
      ##
      archive: {}

      ## @param gobackup.models[0].splitter Configure backup chunking
      ## ref: https://gobackup.github.io/configuration/splitter
      ##
      splitter: {}

## GoBackup ConfigMap settings
## @param configMap.annotations Annotations for the ConfigMap resource
## @param configMap.labels Extra Labels for the ConfigMap resource

configMap:
  annotations: {}
  labels: {}

## @section Common Secret parameters
##

## GoBackup Common Secret settings
## @param secret.annotations Common annotations for the SMTP, HIBP, Admin and Database secrets
## @param secret.labels Common extra labels for the SMTP, HIBP, Admin and Database secrets

secret:
  annotations: {}
  labels: {}

## @section Ingress parameters
##

## GoBackup Ingress settings
## @param ingress.enabled Whether to enable Ingress
## @param ingress.className The IngressClass to use for the pod's ingress
## @param ingress.whitelist A comma-separated list of IP addresses to whitelist
## @param ingress.annotations Annotations for the Ingress resource
## @param ingress.tls A list of hostnames and secret names to use for TLS
## @param ingress.hosts A list of hosts for the Ingress resource

ingress:
  enabled: false
  className: ""
  whitelist: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  hosts: []
  # - host: domain.tld
  #   paths:
  #     - path: /
  #       pathType: ImplementationSpecific

## @section Service parameters
##

## GoBackup Service settings
service:
  ## @param service.type [default: ClusterIP] The type of service to create
  ##
  type: ClusterIP
  ## @param service.port [default: 8273] The port to use on the service
  ##
  port: 8273
  ## @param service.nodePort [default: 30080] The Node port to use on the service
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ## NOTE: choose port between <30000-32767>
  ##
  nodePort: 30080
  ## @param service.extraPorts Extra ports to add to the service
  ## https://kubernetes.io/docs/concepts/services-networking/service/#multi-port-services
  ## e.g.
  ## extraPorts:
  ##   - name: https
  ##     protocol: TCP
  ##     port: 443
  ##     targetPort: 9377
  ##
  extraPorts: []
  ## @param service.annotations [object] Annotations for the service resource
  ##
  annotations: {}
  ## @param service.labels [object] Labels for the service resource
  ##
  labels: {}
  ## @param service.externalTrafficPolicy [default: Cluster] The external traffic policy for the service
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.internalTrafficPolicy [default: Cluster] The internal traffic policy for the service
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  internalTrafficPolicy: Cluster
  ## @param service.clusterIP [string] Define a static cluster IP for the service
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP Set the Load Balancer IP
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  loadBalancerIP: ""
  ## @param service.loadBalancerClass Define Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  ##
  loadBalancerClass: ""
  ## @param service.loadBalancerSourceRanges Service Load Balancer source ranges
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## e.g.
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.externalIPs Service External IPs
  ## https://kubernetes.io/docs/concepts/services-networking/service/#external-ips
  ## e.g.
  ## externalIPs:
  ##   - 10.10.10.1
  ##   - 201.22.30.1
  ##
  externalIPs: []
  ## @param service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
  ## If "ClientIP", consecutive client requests will be directed to the same Pod
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  ##
  sessionAffinity: None
  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  ##
  sessionAffinityConfig: {}
  ## @param service.ipFamilyPolicy [object] The ipFamilyPolicy
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/
  ##
  ipFamilyPolicy: ""

## @section RBAC parameters
##

## GoBackup RBAC settings
## @param rbac.create Whether to create RBAC resources
## @param rbac.rules Extra rules to add to the Role
##
rbac:
  create: true
  rules: []

## @section Service Account parameters
##

## GoBackup Service Account settings
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
## @param serviceAccount.create Whether a service account should be created
## @param serviceAccount.automount Whether to automount the service account token
## @param serviceAccount.annotations Annotations to add to the service account
## @param serviceAccount.name A custom name for the service account, otherwise gobackup.fullname is used
## @param serviceAccount.secrets A list of secrets mountable by this service account
##
serviceAccount:
  create: true
  automount: false
  annotations: {}
  name: ""
  secrets: []

## @section Liveness Probe parameters
##

## GoBackup Liveness Probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
##
livenessProbe:
  ## @param livenessProbe.enabled Enable or disable the use of liveness probes
  ##
  enabled: false
  ## @param livenessProbe.initialDelaySeconds Configure the initial delay seconds for the liveness probe
  ##
  initialDelaySeconds: 5
  ## @param livenessProbe.timeoutSeconds Configure the initial delay seconds for the liveness probe
  ##
  timeoutSeconds: 1
  ## @param livenessProbe.periodSeconds Configure the seconds for each period of the liveness probe
  ##
  periodSeconds: 10
  ## @param livenessProbe.successThreshold Configure the success threshold for the liveness probe
  ##
  successThreshold: 1
  ## @param livenessProbe.failureThreshold Configure the failure threshold for the liveness probe
  ##
  failureThreshold: 10

## @section Readiness Probe parameters
##

## GoBackup Readiness Probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
##
readinessProbe:
  ## @param readinessProbe.enabled Enable or disable the use of readiness probes
  ##
  enabled: false
  ## @param readinessProbe.initialDelaySeconds Configure the initial delay seconds for the readiness probe
  ##
  initialDelaySeconds: 5
  ## @param readinessProbe.timeoutSeconds Configure the initial delay seconds for the readiness probe
  ##
  timeoutSeconds: 1
  ## @param readinessProbe.periodSeconds Configure the seconds for each period of the readiness probe
  ##
  periodSeconds: 10
  ## @param readinessProbe.successThreshold Configure the success threshold for the readiness probe
  ##
  successThreshold: 1
  ## @param readinessProbe.failureThreshold Configure the failure threshold for the readiness probe
  ##
  failureThreshold: 3

## @section Startup Probe parameters
##

## GoBackup Startup Probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
##
startupProbe:
  ## @param startupProbe.enabled Enable or disable the use of readiness probes
  ##
  enabled: false
  ## @param startupProbe.initialDelaySeconds Configure the initial delay seconds for the startup probe
  ##
  initialDelaySeconds: 5
  ## @param startupProbe.timeoutSeconds Configure the initial delay seconds for the startup probe
  ##
  timeoutSeconds: 1
  ## @param startupProbe.periodSeconds Configure the seconds for each period of the startup probe
  ##
  periodSeconds: 10
  ## @param startupProbe.successThreshold Configure the success threshold for the startup probe
  ##
  successThreshold: 1
  ## @param startupProbe.failureThreshold Configure the failure threshold for the startup probe
  ##
  failureThreshold: 10

## @section PodDisruptionBudget parameters
##

## GoBackup pod disruption budget settings
## ref: # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
## @param podDisruptionBudget.enabled [default: true] Enable the pod disruption budget
## @param podDisruptionBudget.minAvailable [default: 1] The minimum amount of pods which need to be available
##
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable:

## @section Pod settings
##

## GoBackup replicas
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
## @param replicas The amount of replicas GoBackup deployment should create
##
replicas: 1

## GoBackup resource settings
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## @param resources The resource limits/requests for the GoBackup pod
##
resources: {}
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

## ref: https://kubernetes.io/docs/concepts/storage/volumes/
## @param volumes Define volumes for the GoBackup pod
##
volumes: []

## ref: https://kubernetes.io/docs/concepts/storage/volumes/
## @param volumeMounts Define volumeMounts for the GoBackup pod
##
volumeMounts: []

## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## @param initContainers Define initContainers for the main GoBackup server
##
initContainers: []

## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## @param tolerations Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## @param affinity Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## @param strategy Specify a deployment strategy for the GoBackup pod
##
strategy: {}
#  type: RollingUpdate
#  rollingUpdate:
#    maxUnavailable: 1

## @param podAnnotations Extra annotations for the GoBackup pod
##
podAnnotations: {}

## @param podLabels Extra labels for the GoBackup pod
##
podLabels: {}
#  pod-security.kubernetes.io/warn: privileged
#  pod-security.kubernetes.io/audit: privileged
#  pod-security.kubernetes.io/enforce: baseline

## @param priorityClassName The name of an existing PriorityClass
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
##
priorityClassName: ""

## @section Security context settings
##

## @param podSecurityContext Security context settings for the GoBackup pod
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
podSecurityContext: {}
# fsGroup: 1001
# supplementalGroups:
#   - 1001

## @param securityContext General security context settings for
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext: {}
# allowPrivilegeEscalation: false
# privileged: false
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsGroup: 1001
# runAsUser: 1001
# capabilities:
#   drop:
#     - ALL
