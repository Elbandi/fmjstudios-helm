{{- /*
  Web Auth Secret
*/}}
{{- if not .Values.gobackup.web.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "gobackup.secret.webAuth" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: gobackup
    {{- include "gobackup.labels" . | nindent 4 }}
    {{- if .Values.secret.labels }}
    {{- toYaml .Values.secret.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.secret.annotations }}
  annotations:
    {{- toYaml .Values.secret.annotations | nindent 4 -}}
  {{- end }}
type: Opaque
data:
  username: {{ .Values.gobackup.web.username | b64enc | quote }}
  password: {{ .Values.gobackup.web.password | b64enc | quote }}
{{- end }}
---
{{- /*
  Database Secrets
*/}}
{{- range $_, $model := .Values.gobackup.models }}
{{- range $_, $database := $model.databases }}
{{- if not $database.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "gobackup.secret.database" (merge $ (dict "model" $model.name "type" $database.type)) }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/component: gobackup
    {{- include "gobackup.labels" $ | nindent 4 }}
    {{- if $.Values.secret.labels }}
    {{- toYaml $.Values.secret.labels | nindent 4 }}
    {{- end }}
  {{- if $.Values.secret.annotations }}
  annotations:
    {{- toYaml $.Values.secret.annotations | nindent 4 -}}
  {{- end }}
type: Opaque
data:
  username: {{ $database.config.username | b64enc | quote }}
  password: {{ $database.config.password | b64enc | quote }}
{{- end }}
---
{{- end }}
{{- end }}
{{- /*
  Storage Secrets
*/}}
{{- range $_, $model := .Values.gobackup.models }}
{{- range $_, $storages := $model.storages }}
{{- if and (not $storages.existingSecret) (ne $storages.type "local") }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "gobackup.secret.storage" (merge $ (dict "model" $model.name "type" $storages.type)) }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/component: gobackup
    {{- include "gobackup.labels" $ | nindent 4 }}
    {{- if $.Values.secret.labels }}
    {{- toYaml $.Values.secret.labels | nindent 4 }}
    {{- end }}
  {{- if $.Values.secret.annotations }}
  annotations:
    {{- toYaml $.Values.secret.annotations | nindent 4 -}}
  {{- end }}
type: Opaque
data:
  {{- if (has $storages.type (include "gobackup.config.storages.basicAuth" . | fromJsonArray )) }}
  username: {{ $storages.config.username | b64enc | quote }}
  password: {{ $storages.config.password | b64enc | quote }}
  {{- end }}
  {{- if (has $storages.type (include "gobackup.config.storages.basicAuthKP" . | fromJsonArray )) }}
  username: ${`{{ include "gobackup.env.username" (dict "model" $model.name "type" $storages.type) }}`}
  password: ${`{{ include "gobackup.env.password" (dict "model" $model.name "type" $storages.type) }}`}
  privateKey: ${`{{ include "gobackup.env.privateKey" (dict "model" $model.name "type" $storages.type) }}`}
  passphrase: ${`{{ include "gobackup.env.passphrase" (dict "model" $model.name "type" $storages.type) }}`}
  {{- end }}
  {{- if eq $storages.type "gcs" }}
  credentials: ${`{{ include "gobackup.env.credentials" (dict "model" $model.name "type" $storages.type) }}`}
  {{- end }}
  {{- if eq $storages.type "azure" }}
  clientId: ${`{{ include "gobackup.env.clientId" (dict "model" $model.name "type" $storages.type) }}`}
  clientSecret: ${`{{ include "gobackup.env.clientSecret" (dict "model" $model.name "type" $storages.type) }}`}
  {{- end }}
  {{- if (has $storages.type (include "gobackup.config.storages.s3" . | fromJsonArray )) }}
  accessKey: ${`{{ include "gobackup.env.accessKey" (dict "model" $model.name "type" $storages.type) }}`}
  secretKey: ${`{{ include "gobackup.env.secretKey" (dict "model" $model.name "type" $storages.type) }}`}
  {{- end }}
{{- end }}
---
{{- end }}
{{- end }}
{{- /*
  Notifier Secrets
*/}}
{{- range $_, $model := .Values.gobackup.models }}
{{- range $_, $notifiers := $model.notifiers }}
{{- if not $notifiers.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "gobackup.secret.storage" (merge $ (dict "model" $model.name "type" $notifiers.type)) }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/component: gobackup
    {{- include "gobackup.labels" $ | nindent 4 }}
    {{- if $.Values.secret.labels }}
    {{- toYaml $.Values.secret.labels | nindent 4 }}
    {{- end }}
  {{- if $.Values.secret.annotations }}
  annotations:
    {{- toYaml $.Values.secret.annotations | nindent 4 -}}
  {{- end }}
type: Opaque
data:
  {{- if eq $notifiers.type "mail" }}
  username: ${`{{ include "gobackup.env.username" (dict "model" $model.name "type" $notifiers.type) }}`}
  password: ${`{{ include "gobackup.env.password" (dict "model" $model.name "type" $notifiers.type) }}`}
  {{- end }}
  {{- if eq $notifiers.type "ses" }}
  accessKey: ${`{{ include "gobackup.env.accessKey" (dict "model" $model.name "type" $notifiers.type) }}`}
  secretKey: ${`{{ include "gobackup.env.secretKey" (dict "model" $model.name "type" $notifiers.type) }}`}
  {{- end }}
  {{- if (has $notifiers.type (list "telegram" "github" "postmark" "sendgrid")) }}
  token: ${`{{ include "gobackup.env.token" (dict "model" $model.name "type" $notifiers.type) }}`}
  {{- end }}
{{- end }}
---
{{- end }}
{{- end }}
{{- /*
  Encryption Secret
*/}}
{{- range $_, $model := .Values.gobackup.models }}
{{- range $_, $encryption := $model.encryption }}
{{- if not $encryption.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "gobackup.secret.encryption.password" (dict "model" $model.name) }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/component: gobackup
    {{- include "gobackup.labels" $ | nindent 4 }}
    {{- if $.Values.secret.labels }}
    {{- toYaml $.Values.secret.labels | nindent 4 }}
    {{- end }}
  {{- if $.Values.secret.annotations }}
  annotations:
    {{- toYaml $.Values.secret.annotations | nindent 4 -}}
  {{- end }}
type: Opaque
data:
  passphrase: {{ $encryption.password | b64enc | quote }}
{{- end }}
---
{{- end }}
{{- end }}
